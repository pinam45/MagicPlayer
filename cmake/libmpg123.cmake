message(STATUS "Configuring libmpg123")

# Config
set(EMBEDDED_LIBMPG123_NAME                        "libmpg123")
set(EMBEDDED_LIBMPG123_VERSION                     "1.25.8")
set(EMBEDDED_LIBMPG123_MINGW_STATIC_FILENAME       "libmpg123.a")
set(EMBEDDED_LIBMPG123_MINGW_SHARED_FILENAME       "libmpg123-0.dll")
set(EMBEDDED_LIBMPG123_MSVC_STATIC_FILENAME        "libmpg123.lib")
set(EMBEDDED_LIBMPG123_MSVC_SHARED_FILENAME_LIB    "libmpg123.lib")
set(EMBEDDED_LIBMPG123_MSVC_SHARED_FILENAME_DLL    "libmpg123.dll")

cmutils_define_os_variables()
if(OS_WINDOWS)
	# Cache config
	set(STATICALLY_LINK_LIBMPG123 OFF CACHE BOOL "Statically link libmpg123")

	# Embeded library config
	cmutils_define_compiler_variables()
	set(COMPILER_FOLDER "mingw")
	if(COMPILER_CLANG OR COMPILER_MSVC)
		set(COMPILER_FOLDER "msvc")
	endif()

	cmutils_define_arch_variables()
	set(ARCH_FOLDER "x86")
	if(ARCH_64BITS)
		set(ARCH_FOLDER "x64")
	endif()

	set(EMBEDED_LIBMPG123_PATH ${CMAKE_SOURCE_DIR}/extlibs/${EMBEDDED_LIBMPG123_NAME}-${EMBEDDED_LIBMPG123_VERSION})
	set(EMBEDED_LIBMPG123_LINK_PATH ${EMBEDED_LIBMPG123_PATH}/lib/${COMPILER_FOLDER}/${ARCH_FOLDER})
	set(EMBEDED_LIBMPG123_COPY_PATH ${EMBEDED_LIBMPG123_PATH}/lib/${COMPILER_FOLDER}/${ARCH_FOLDER})
	if(STATICALLY_LINK_LIBMPG123)
		# Static link
		set(EMBEDED_LIBMPG123_LINK_PATH ${EMBEDED_LIBMPG123_LINK_PATH}/static)
		if(COMPILER_CLANG OR COMPILER_MSVC)
			set(EMBEDED_LIBMPG123_LINK_PATH ${EMBEDED_LIBMPG123_LINK_PATH}/${EMBEDDED_LIBMPG123_MSVC_STATIC_FILENAME})
		else()
			set(EMBEDED_LIBMPG123_LINK_PATH ${EMBEDED_LIBMPG123_LINK_PATH}/${EMBEDDED_LIBMPG123_MINGW_STATIC_FILENAME})
		endif()
	else()
		# Dynamic link
		set(EMBEDED_LIBMPG123_LINK_PATH ${EMBEDED_LIBMPG123_LINK_PATH}/shared)
		set(EMBEDED_LIBMPG123_COPY_PATH ${EMBEDED_LIBMPG123_COPY_PATH}/shared)
		if(COMPILER_CLANG OR COMPILER_MSVC)
			set(EMBEDED_LIBMPG123_LINK_PATH ${EMBEDED_LIBMPG123_LINK_PATH}/${EMBEDDED_LIBMPG123_MSVC_SHARED_FILENAME_LIB})
			set(EMBEDED_LIBMPG123_COPY_PATH ${EMBEDED_LIBMPG123_COPY_PATH}/${EMBEDDED_LIBMPG123_MSVC_SHARED_FILENAME_DLL})
		else()
			set(EMBEDED_LIBMPG123_LINK_PATH ${EMBEDED_LIBMPG123_LINK_PATH}/${EMBEDDED_LIBMPG123_MINGW_SHARED_FILENAME})
			set(EMBEDED_LIBMPG123_COPY_PATH ${EMBEDED_LIBMPG123_COPY_PATH}/${EMBEDDED_LIBMPG123_MINGW_SHARED_FILENAME})
		endif()
		# Copy binary to output folder
		configure_file(${EMBEDED_LIBMPG123_COPY_PATH} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY} COPYONLY)
	endif()

	# Variables
	get_filename_component(LIBMPG123_INCLUDE_DIR ${EMBEDED_LIBMPG123_PATH}/include ABSOLUTE)
	get_filename_component(LIBMPG123_LIBRARY ${EMBEDED_LIBMPG123_LINK_PATH} ABSOLUTE)
else()
	# Find PkgConfig
	find_package(PkgConfig REQUIRED)
	if (NOT PKG_CONFIG_FOUND)
		message(FATAL_ERROR "PkgConfig not found (used to find libmpg123)")
	endif()

	# Find libmpg123
	pkg_search_module(LIBMPG123 REQUIRED libmpg123)
	if (NOT LIBMPG123_FOUND)
		message(FATAL_ERROR "libmpg123 not found (dev version must be installed on the system to compile)")
	endif()

	# Variables
	set(LIBMPG123_INCLUDE_DIR   ${LIBMPG123_INCLUDE_DIRS})
	set(LIBMPG123_LIBRARY       ${LIBMPG123_LIBRARIES})
endif()

# Message
message("> include: ${LIBMPG123_INCLUDE_DIR}")
message("> library: ${LIBMPG123_LIBRARY}")
message(STATUS "Configuring libmpg123 - Done")
